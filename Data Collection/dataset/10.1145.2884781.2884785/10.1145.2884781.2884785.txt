Discovering ‚ÄúUnknown Known‚Äù Security Requirements
Awais Rashid
Security Lancaster Research
Centre
Lancaster University, UK
a.rashid@lancaster.ac.ukSyed Asad Ali Naqvi
Security Lancaster Research
Centre
Lancaster University, UK
s.naqvi@lancaster.ac.ukRajiv Ramdhany
Security Lancaster Research
Centre
Lancaster University, UK
nirish777@gmail.com
Matthew Edwards
Security Lancaster Research
Centre
Lancaster University, UK
m.edwards7@lancaster.ac.ukRuzanna Chitchyan
Dept. of Computer Science
University of Leicester, UK
rc256@leicester.ac.ukM. Ali Babar
School of Computer Science
University of Adelaide,
Australia
alibabar.m@gmail.com
ABSTRACT
Security is one of the biggest challenges facing organisations
in the modern hyper-connected world. A number of theoret-
ical security models are available that provide best practice
security guidelines and are widely utilised as a basis to iden-
tify and operationalise security requirements. Such models
often capture high-level security concepts (e.g., whitelisting,
secure congurations, wireless access control, data recovery,
etc.), strategies for operationalising such concepts through
specic security controls, and relationships between the var-
ious concepts and controls. The threat landscape, however,
evolves leading to new tacit knowledge that is embedded
in or across a variety of security incidents. These unknown
knowns alter, or at least demand reconsideration of the the-
oretical security models underpinning security requirements.
In this paper, we present an approach to discover such un-
known knowns through multi-incident analysis. The ap-
proach is based on a novel combination of grounded theory
and incident fault trees. We demonstrate the eectiveness
of the approach through its application to identify revisions
to a theoretical security model widely used in industry.
Categories and Subject Descriptors
D.2.1 [ Software Engineering ]: Requirements/Specications;
K6.5 [ Management of Computing and Information
Systems ]: Security and Protection
Keywords
Security requirements, incident analysis, grounded theory
1. INTRODUCTION
Modern organisations operate as part of a complex, hyper-
connected eco-system comprising other organisations and a
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proÔ¨Åt or commercial advantage and that copies bear this notice and the full citation
on the Ô¨Årst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciÔ¨Åc permission
and/or a fee. Request permissions from permissions@acm.org.
ICSE ‚Äô16, May 14 - 22, 2016, Austin, TX, USA
c2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-3900-1/16/05. . . $15.00
DOI:http://dx.doi.org/10.1145/2884781.2884785diverse range of third-party technologies and services. Such
an eco-system poses challenging security requirements. For
instance, opening up the infrastructure through Internet-
and web-based interfaces to support employee mobility and
interactions with other organisations (e.g., through Software
as a Service) results in many additional entry points that can
be attacked by mal-actors. Similarly, `bring your own device'
cultures, whereby end users utilise new personal technologies
or software services (from partially-trusted third parties) in
their day-to-day working practice, introduce new security
challenges and attack vectors. Furthermore, an organisa-
tion's IT infrastructure is often a patchwork of systems, soft-
ware, services and technologies procured from third-party
providers which can be harbingers of latent vulnerabilities.
Identifying and operationalising security requirements in
such a complex landscape is non-trivial. Consequently, secu-
rity models exist, e.g., [1], that provide best practice guide-
lines to identify and operationalise security requirements.
Such models oer high-level security concepts that can be
used as a basis for security requirements. Examples include:
whitelisting of devices and software; secure congurations
for hardware and software for mobile and desktop devices;
continuous vulnerability assessment and remediation; data
recovery planning; controlled use of administrative privi-
leges, etc. Such models also include detailed guidelines on
how to operationalise such requirements through particular
security controls. Thus they represent our theoretical under-
standing of the current threat landscape and the resultant
security requirements.
However, the threat landscape is increasingly dynamic,
leading to emergence of new security requirements that de-
mand revision, or at least reconsideration, of these theoret-
ical models. Such emergent requirements are often implicit
within or across a variety of security incidents. We refer to
such requirements as unknown knowns1[16]|they repre-
sent knowledge that is \unknown" to the requirements engi-
neer, and so does not make its way into requirements, but
is \known" in that it exists in known security breaches.
Discovering such unknown knowns is challenging because
incidents are usually separated from one another in terms of
1Sawyer et al. adapt Donald Rumsfeld's classication of
known knowns, known unknowns and unknown unknowns
to requirements and argue that there is a fourth category of
unknown known requirements.
2016 IEEE/ACM 38th IEEE International Conference on Software Engineering
   866both time and space. It is rare for two or more incidents to
be closely co-located in time and space, investigated jointly
and a common causal analysis conducted. Quantitative ap-
proaches such as statistical and data-mining analyses, most
commonly used for knowledge aggregation, reveal the corre-
lations and patterns only within the data attributes. These
correlations and patterns tell us what is going on in the data,
but not howorwhythese patterns appear. The analysts still
have to use their domain knowledge to hypothesise about the
how and why. In the absence of aggregation and internal-
isation of common cause-eect knowledge across incidents,
these hypotheses often remain conjectural.
We present an approach to discover such unknown knowns
through qualitative analysis of security incidents across space
and time. Our approach is based on a novel combination of
the grounded theory method [5] and incident fault trees [8]
to identify new concepts and relationships that need to be
integrated into existing theoretical security models { lead-
ing to updated or new models that provide a more eective
basis for identifying and operationalising security require-
ments. The novel contributions of our work are as follows:
We propose a novel synthesis of incident fault trees
and the grounded theory method to aggregate and in-
ternalise common cause-eect knowledge (across inci-
dents) pertaining to unknown known security require-
ments. While the grounded theory method enables
the iterative analysis and synthesis of patterns across
incidents separated by space and time, use of incident
fault trees ensures that explanation is not traded o in
favour of documentation|the analyst has to actively
search for relevant events, their causes, enablers, con-
sequences and mitigation measures.
Our approach is not based on a static structure or
process. Instead, it provides the means to control the
depth of the analysis through explicit procedures for
deriving a hierarchy of concepts across dierent levels
of abstraction. This allows the analyst to express and
explore in detail all three| what, howandwhy|levels
of understanding.
We demonstrate the eectiveness of our approach through
its application to identify revisions to a theoretical se-
curity model [1] widely used in industry.
We discuss related work in Section 2. Section 3 briey in-
troduces grounded theory and incident fault trees. Section 4
presents our approach for discovering unknown knowns. Sec-
tion 5 evaluates our approach through analysis of 11 major
security incidents and identies unknown knowns with re-
spect to the Twenty Critical Security Controls [1] widely
recommended in industry. Section 6 discusses insights from
the analysis while section 7 concludes the paper.
2. RELATED WORK
Several researchers have focused on identication of secu-
rity requirements before the system has been implemented
using, for instance, misuse cases [18], goal and anti-goal anal-
ysis [20], abuse frames [10], and patterns of security goals
[22]. Others have proposed the use of creativity techniques,
such as workshops [6, 11] and goal analysis [7] to identify
potential threats and incidents at the outset of system de-
velopment. However, these various works have not addressedthe consequences of an evolving threat landscape and related
requirements change. Researchers have also highlighted the
limitations of security-modelling languages (e.g., UMLSec,
SecureTropos, KOAS and i*) with respect to relating secu-
rity requirements and dynamic elements of a system [2].
Consequently, more recently, adaptive security has be-
come a lively research topic. For instance, Franquera et
al. [4] advocate the need for an agile security evaluation
framework due to expected changes in security requirements
throughout the development process. Yet, they do not de-
tail construction of such a framework. Tsigkanos et al. [19]
focus on security threats that arise due to physical prox-
imity of potentially malicious agents and valuable assets.
Such proximity requirements are known ahead. When the
physical locations of threats/assets change at runtime, the
pre-specied requirements on security are used to adjust the
security models. Here only the physical topology changes,
not the security requirements themselves.
Elahi et al. [3] propose to extend the i* modelling tech-
nique with vulnerability concepts in order to reason about
vulnerability and threat propagation in requirements mod-
els. This framework is much more considerate of the change
in threats and security requirements. However, it does not
provide any guidelines for nding emergent threats and vul-
nerabilities. Instead it focuses on linking such knowledge
to the requirements models. In contrast, our work provides
such guidelines along with clearly identiable strategies for
revising existing models underpinning security requirements.
Salehie et al. [15] present a qualitative approach (using a
causal network) to evaluate the current state of a system's
security and adapt the relevant countermeasures when se-
cured assets change. Since assets are linked into the causal
network, changes to the asset model propagate to change
in the security preferences inferred from the network. All
models are constructed a-priori with assumptions about the
intended application and its environment. Our approach
complements this by providing a-posteriori evidenced infor-
mation on the origin of changes to the asset model and rich
content for threat model construction.
Multi-incident analysis tools and approaches have been
developed in the context of specic industries to undertake
post-hoc analysis of faults and failures. Such methods of-
ten take a quantitative approach, either based on statistical
correlational techniques (e.g., [14]), or more recently, data
mining approaches (e.g., [21]). Such approaches suer from
inappropriate abstraction , i.e., each incident is described in
terms of a nite number of specied attributes, which have
to be reasonably generic so as to accommodate a large num-
ber of incidents. The distinct details of each incident are
thus abstracted away. Such abstraction also does not al-
low for the representation of semantic dierences owing to
the changing denitions of attributes across time and space
and also the dierent purposes of the data and collection
methods used. Consequently, the correlations and patterns
identied can only reveal what is going on in the data, but
not how or why these patterns appear.
A number of general purpose single incident analysis ap-
proaches can also facilitate multi-incident analysis. Ap-
proaches such as MORT [9] and HPIP [12] often express
the accumulated insights about hazards in a particular eld
by means of a limited number of concepts that can be used
to describe an incident. These concepts may include tax-
onomies of incident types, their potential causes, and pre-
867Figure 1: Symbols used in Incident Fault Trees
scribed questions to guide the incident analysis. This en-
ables the results from dierent incident analyses to be in-
tegrated by means of a common incident vocabulary. How-
ever, this integrative ability generally comes at the cost of
accuracy, as these techniques struggle to accurately repre-
sent the peculiar and idiosyncratic characteristics of each
incident. Similar to quantitative multi-incident analysis ap-
proaches, these techniques also cannot mitigate the problem
of semantic dierences between various incident attributes
across time and space. Thus, there is a need for approaches,
such as ours, that capture and integrate new cause-eect
knowledge into an evolving security model while preserving
the contextual richness of incidents.
3. BACKGROUND CONCEPTS
3.1 Grounded Theory Method
The Grounded Theory Method (GTM) [5] is an approach
for deriving theories based entirely on data. It works by
breaking the data down into small portions, such as indi-
vidual lines, and then assigning labels, called codes , to each
portion. Each code should represent the concept expressed
in its corresponding portion of data. The codes are then
compared to one another and, based on similarities and dif-
ferences, grouped under more abstract concepts called cate-
gories . This constant comparison between and across codes
and categories continues, even as new codes are integrated
into the analysis and new categories discovered. The de-
rived categories, their relationships and dependencies, and
reections on the analysis are recorded in memos . Through
this iterative abductive approach, where data analysis and
collection are both simultaneous and interdependent, a the-
ory emerges which is fully grounded in the available data.
GTM is used in our approach to aggregate the results of
the various individual security incident analyses, augmented
through incident fault trees (IFTs), to produce an abductive
theory that captures unknown known security requirements.
3.2 Incident Fault Trees
An Incident Fault Tree (IFT) [8] is a modelling tool for the
retrospective documentation and analysis of incidents and
accidents. It is used to explain an incident in terms of the
various causes that contributed to it. IFT is based on and,
thus, uses the graphical symbols (see Fig. 1) of the Fault Tree
Analysis (FTA) method. An IFT comprises of two broad
types of notations: events and gates. Events may describe
specic discrete events or other conditions that are relevant
in terms of causing an incident. Gates are symbols that
represent various ways in which the events need to combine
in order to cause another event. We next describe those
symbols that are used for IFT modelling in our approach:
Basic Event: cannot be explained in terms of othercausal events, or has no known causes.
Intermediate Event: can be explained in terms of other
causal events, or there are known causes for it.
Undeveloped Event: can be explained in terms of other
causal events but we have chosen not to do so because
such causal elaboration serves no analytical purpose.
AND Gate and OR Gate: respectively represent the
conjunction or disjunction of causal events.
Inhibit Gate: is placed between an event and its causes
to stop an event from occurring unless the condition
in the Conditioning Event is satised. In practice, this
combination is used in our approach to model mitigat-
ing or remedial actions that may act as barriers to the
progress towards a security breach.
IFTs support our GTM-based approach by providing a
framework for explicitly structuring the codes/categories and
their causal relationships. Such a framework is well suited
to GTM-based qualitative analysis as it is descriptive and
scalable|it can grow in detail as the investigation proceeds
and more information comes to light. Further, the process
of deriving a basic IFT (that describes an incident) may be
augmented through the change analysis and barrier analysis
methods [8]. These methods encourage the analyst to think
about the specic departures from normal operating proce-
dures and the failed barriers that led to the incident. This
leads to consideration of not only the errors of commission,
i.e., factors that contributed to an incident, but also the
errors of omission, i.e., what was notdone that led to the
security breach. IFTs facilitate exibility in analysis because
the analyst can explore dierent hypotheses by elaborating
and developing dierent paths in the tree to investigate var-
ious causal dependencies. Furthermore, conventional GTM
can be eort intensive as all information is indiscriminately
coded and categorised. In contrast, in our approach, this
coding is facilitated and directed by IFTs.
4. APPROACH
Our method for discovering unknown known security re-
quirements is qualitative { it is a synthesis of GTM with
IFTs. It is both an analysis and an investigation method.
The method evolved from our desire to nd an eective way
to deal with the implicitness of domain knowledge when con-
ducting a multi-incident analysis of security breaches2. In
order to manage the large amount of unstructured and semi-
structured data, we started organising it using IFTs. Even-
tually the IFT became the pivotal model in the method,
which honed and guided both the analysis and investiga-
tion aspects of the method. Just like conventional grounded
theorists use interviews to extract the relevant pieces of in-
formation for their analysis from the life story of the sub-
ject/interviewee, our method uses the IFT model to extract
the relevant pieces of information for the purpose of causal
analysis from the documentation of an incident. The nature
of IFT means that the analyst is actively prompted to search
for the breach events, their enabling contexts, resulting con-
sequences and preventative measures. Fig. 2 presents an
overview of our method. The ovals represent processes and
2We use the term incident and breach interchangably to
maintain consistency with the terminology of IFTs.
868Figure 2: Overview of the method
the rectangles represent the artefacts or products of these
processes. The method is aimed at analysts (e.g., in organ-
isations such as CERTs) interested in distilling new classes
of security problems through analysis of otherwise isolated
security incidents. We next discuss the various steps of the
method. Note that, for retrospective analysis, as is the case
with our method, raw data mostly consists of second hand
data in the form of breach incident reports, studies, analyses
and other archived information.
Drawing Trees: The analysis usually begins by rst
reading the incident investigation document(s) to identify
the interesting events or conditions that we would like to
analyse and explain. After one or more of these events or
conditions have been identied, each of them may become
root nodes for IFTs. Next, we search for and identify con-
cepts and factors, from the documentation, that caused the
root incident. This process continues recursively, with fur-
ther searches, to identify the causes of each of the previ-
ously identied causal factors. This search may be informed
bybarrier analysis (i.e., actions and countermeasures that
were either unused or inadequate in preventing the incident)
and change analysis (i.e., deviations from normal operating
procedures or abnormal working practices that contributed
to the incident). Fig. 3 represents the fault tree as produced
by our analysis for one of the incidents we analysed.
Open Coding: We can see in Fig. 2 that the Drawing
Trees process is part of a larger process that also contains
Open Coding and Identifying Remedial Actions . This larger
process signies that the three activities are interdependent
and essentially happen in parallel. Open coding is the pro-
cess of annotating small portions of text with codes that
indicate important concepts from these texts. When we
identify an interesting event from the documentation that
we would like to analyse, we also select the text related to
that event and open code that text. The choice of the rele-vant events, texts, and the coding itself can be carried out
by two or more independent researchers to counter poten-
tial bias. The codes identied from the coding process may
in turn inform the tree building process by indicating the
causes for the event under consideration. This process can
become cyclical where building the IFT may lead to select-
ing the material for open coding, and open coding may lead
to building and modifying the IFT.
The data selected for open coding, though centred on the
IFT, may contain some additional details as well. Thus the
codes created during open coding may not be strictly re-
stricted to the event that we were trying to explain. These
additional codes may be valuable in that they may produce
insights that would result in modifying or adding data to the
IFT in ways that we had not anticipated before. They also
provide information about the context in which incidents
take place. Consequently, these peripheral codes may lead
to the discovery of important concepts and new directions
for investigation during the constant comparison process be-
cause they may also be present in other incidents.
Identifying Remedial Actions: The structure of the
IFTs provides us with the opportunity to identify the ar-
eas where remedial actions might be taken. The areas are
identied in the form of the paths going from the leaf nodes
to the root of the tree. The remedial actions are essentially
those activities that try to disrupt the progression of causes
from the leaves to the root. A remedial action on a causal
path is represented by a combination of an inhibit gate and
a conditioning event. It describes the actions that can miti-
gate the eects of the events described along the causal path
below the inhibit gate. These solutions may come from rec-
ommendations in the incident report, subsequent follow up
reports, or from news sources after the incident describing
how the state has changed and improved since the incident.
The process of deriving remedies may also help to rene
IFTs. While thinking about barriers and recommendations,
associations may appear between dierent causal paths al-
lowing us to aggregate them under a common parent node
or category. During constant comparison, the remedial mea-
sures from dierent failures are compared and can result in
identication of unknown known security requirements.
Memo Writing: Generalities in the data, in the form of
concepts and relationships, are discovered and recorded dur-
ing memo writing. The processes of Drawing Trees, Open
Coding, and Identifying Remedial Actions will produce an
IFT and a set of codes related to that tree. During memo
writing these codes are compared with one another and,
based on similarities and dierences, aggregated into more
abstract concepts called categories. Further comparisons be-
tween and across codes and categories may lead to the dis-
covery of more abstract categories. These categories and
their relationships are recorded in memos. All hypotheses
and suppositions are also recorded in memos. Memos can
be written at any stage of the analysis. The aggregation and
extrapolation of concepts during memo writing, informed by
the causal relationships in the IFTs, may point to gaps in
existing analysis and thus provide direction to the emerging
theory. For example, a memo may reveal a new possible
causal factor about an incident thus prompting a search for
evidence to substantiate this hypothesis. If this evidence
is found then the revealed causal factor may be added to
the IFT for the incident, thus enriching it. New insights
may also be discovered because writing memos can expli-
869cate tacit ideas. Figs. 4, 5, 6 show excerpts from various
memos, summarising the derivation of several categories in
terms of ner grained concepts. During the constant com-
parison process where faults3are compared to other faults,
their memos are also compared to one another in order to
discover unknown known security requirements.
Constant Comparison: In this phase the insights ob-
tained from an incident analysis are integrated into the evolv-
ing theory by constantly comparing its artefacts (IFT and
memos describing categories and their relationships) with
similar artefacts from previously analysed incidents, as well
as the concepts of the evolving theory. This comparison
integrates knowledge across various incidents, where both
causes and remedies identied for one incident may inform
and instigate further analysis of other incidents in order to
discover unknown known security requirements.
Sorting Memos and Distilling Theory: The sorting
and writing process mainly consists of selecting and arrang-
ing the relevant information from the memos and compar-
ing it against the existing theoretical security model in or-
der to distill a theory representing unknown known security
requirements. This theory, as nally presented, comprises
a number of security concepts and their associations. The
remedial measures are also classied into categories and re-
lated to causal factors with the aim of providing guidance
for operationalising the security requirements.
5. EV ALUATION
In order to evaluate the eectiveness of our approach, we
apply it to discover unknown known security requirements
with respect to a real-world security model: the Council on
Cyber Security top 20 Critical Security Controls (CSC20) [1].
We focus on a particular class of security threats: data exl-
tration (i.e. data theft). This is because, as systems become
increasingly open, security models need to evolve beyond
traditional `castle defences' of rewalls and intrusion detec-
tion systems. Furthermore, the increasing frequency of data
breaches { despite awareness of and compliance with mod-
els such as CSC20 { alludes to the possibility of unknown
known security requirements with respect to such models.
By applying our approach to a corpus of 11 security in-
cidents that exhibit a diversity of attack traits, we show
that it is possible to keep the corpus of incidents relatively
small and still saturate data exltration attack concepts
and countermeasures. We then present a comparative anal-
ysis of our discovered security requirements with CSC20.
The analysis was conducted with reference to Version 5.0
of CSC20, the latest version at the time of the analysis.
This analysis reveals disparities|unknown known security
requirements|in the coverage of data exltration threats in
the theoretical security model represented by CSC20. We
note that the unknown known security requirements discov-
ered through our analysis were passed on to the Council
for Cyber Security for consideration in revisions to CSC20.
Version 6.0, subsequently released, reects a number of our
recommendations. Though the Council for Cyber Security
does not provide direct traceability between any recommen-
dations submitted and revisions released, this nevertheless
demonstrates the utility of our approach.
3We use the term `faults' to refer to vulnerabilities or ac-
tions leading to security violations in order to maintain con-
sistency with the terminology of IFTs.We next illustrate our analysis in detail, initially describ-
ing the analysis process for the rst incident in our corpus in
terms of its IFT and GTM analysis artefacts (Sec. 5.1). We
then describe the various intermediate stages in our analy-
sis process and show how the various security concepts and
requirements were discovered (Sec. 5.2). Finally, we sum-
marise the unknown known security requirements with re-
spect to CSC20 (Sec. 5.3). The full analysis and the compre-
hensive IFTs are available at: http://dx.doi.org/10.17635/
lancaster/researchdata/60.
5.1 Analysis of Nitro Attacks
The Nitro attacks were a targeted campaign (Jul-Sept.
2011) against 29 Fortune 500 companies in the chemical sec-
tor and another 19 in various other sectors, primarily the
defence sector. The attackers sought to steal intellectual
property such as design documents, chemical formulae and
manufacturing processes for chemicals and advanced mate-
rials. We model the chain of events leading to the nal
outcome using an IFT. For the sake of brevity, a simplied
IFT is shown in Fig. 3.
The tree oers insight into the way the exltration attack
panned out and where security controls can be deployed to
detect, prevent or mitigate the attack. As illustrated (Event
1.1), the rootkit program (i.e., the malware), authenticated
with a Command and Control (C2) server via TCP port
80, and upon success, received binary code containing Poi-
son Ivy, a common Remote Access Trojan (RAT). Using the
C2 server, the attackers then instructed the RAT instance
(Event 1.3) to provide the infected computer's IP address,
the names of all other computers in the workgroup or do-
main, and dumps of Windows cached password hashes. Us-
ing various tactics such as pass-the-hash attacks or cracked
Windows password hashes, the attackers proceeded to gain
access to other computers with the same Network Logon user
rights (Event 2.1). As attackers needed more elevated access
rights, they performed privilege escalation (Event 2.2) on
non-administrative users and then moved on to gain access
to key high value targets, which included process experts
and server administrators. This enabled them to traverse
the network with ease and nd servers hosting the desired
intellectual property and gain access to the sensitive mate-
rials. Once the attackers identied the desired intellectual
property, they established access to staging servers at key
aggregation points on the network; this was done to prepare
the data for exltration. The data was copied to these inter-
nal staging servers where it was aggregated, compressed and
encrypted for exltration (events 4.1 and 4.2). Depending on
the volume of data to be exltrated and the degree of stealth
required, the attackers used dierent exltration channels,
such as FTP, HTTP and email { all of which are high band-
width channels available to users on most networks.
Open coding and the constant comparison of codes en-
ables the requirements analyst to organise the above un-
derstanding of the causes of the incident and produces in-
sights that result in rening the IFT. Codes are grouped
into hierarchies leading to the formation of categories. The
comparison of codes and categories for the Nitro attacks
produced the following main categories: Target Identica-
tion, Reconnaissance, Attack Staging, Network Intrusion,
Concealment & Persistence, Data Exltration, Attack Con-
sequences, Countermeasures. From this rened understand-
ing, the IFT was modied to include these super nodes. Us-
870Figure 3: Simplied IFT for Nitro attacks
ing the IFT, the data exltration concept was recursively
developed into concepts and factors that may have con-
tributed to it. Our renement of the data exltration con-
cept led to the selection of new material about data exltra-
tion schemes utilised within the incident. This new material
was open-coded and the codes constantly compared to intro-
duce new concepts (sub-categories) recorded in memos. As
seen in Fig. 4, the Data Exltration concept is broken fur-
ther into the concepts: 1) Data Capture, 2) Data Staging &
Preparation, 3) Exltration Channels, and 4) C2 Infrastruc-
ture/Communications. Further iterations of this analytical
process enabled, for example, the dierent modalities of the
`Data Capture' concept to be dened, and the identication
of overt/covert types of exltration channels. Whenever pos-
sible, insights gained from the memos were used to modify
the tree to introduce new causal factors (e.g., events 5.1
and 5.2). Additional insights about countermeasures were
obtained through barrier analysis. Fig. 5 shows a memo
excerpt, summarising such remedial actions uncovered.
Our memos not only recorded the concepts representing
various stages and remedies of attacks, produced through
the comparisons of codes and categories. They also identi-
ed and summarised the classes of exploits used during the
attack, the conditions within the organisation that made the
use of these exploits favourable and the types of channels
used to exltrate data in the incident. They were also used
to hypothesise on various other possible data exltration
channels that could have been used in the attack. Since our
IFT analysis indicated a combination of network intrusionand exltration causes that led to the theft of intellectual
property, the memos reected both the intrusion defences
to defeat the exploits used in the attack as well as post-
intrusion measures to prevent data exltration.
5.2 Iteratively Building the Theory
Our method for discovering unknown known security re-
quirements involves rening our theory by iteratively apply-
ing the analysis approach to several other incidents. This
involves integrating the insights obtained from the current
analysis with those from previous analyses by constantly
comparing their IFTs as well as categories recorded in memos.
As the new categories identied in the current analysis are
compared with the extant set of categories, existing cat-
egories are potentially modied or aggregated or new cate-
gories created to augment existing ones. Such new categories
indicate new patterns of attacks, new classes of data ex-
ltration channels and countermeasures identied from the
barrier analysis within the IFT.
We used insights obtained from our rst analysis to se-
lect the next incidents for analysis. In particular, after the
rst incident analysis we became cognisant of the dierent
modalities in which data assets are prevalent in organisa-
tions, namely (see Fig. 6(a)): data at rest (i.e., `inactive'
data stored in databases, le servers, archives, etc. that
is not accessed or changed frequently), data in use (i.e.,
`active' data processed by applications and held in com-
puter memory, CPU caches/registers, or operational tables
in databases) and data in motion (i.e., data in transit in
871Figure 4: Summary of the subcategories of the data
exltration category from the Nitro attacks
Figure 5: Summary of the countermeasures cate-
gories derived from the Nitro attacks
the form of packets transported by communication proto-
cols and data traversing the network, temporarily residing
in memory buers to be forwarded). We used this insight to
guide our incident selection process to: (i) discover concepts
across the breadth of incident classes, and (ii) within each
Figure 7: Sample countermeasures identied
through the iterations
class, to attempt to saturate concepts by considering further
variants of the exltration attacks of the same class.
To select data exltration incidents that exhibited the
`Data in Motion' and `Data in Use' modalities, we considered
the range of attacks that targeted the consumer-payment
chain, which includes actors such as merchants and their
payment-processing partners. For data-in-motion-class ex-
ltration incidents, we selected attack campaigns that used
various point-of-sale (POS) memory-scraping malware such
as the Dexter malware-based breaches of POS systems in
retail, hospitality and fast food outlets and the Target data
breach incident. Amongst the incidents we considered, the
Heartland Payment Systems data breach embodied exltra-
tion strategies where attackers targeted both data in motion
(card data at the merchants' POS terminals) and data in use
(card data within payment processing systems).
As in our previous iteration, incident trees were created
to facilitate the analysis of causal factors; barrier analysis
used to determine the eectiveness of mitigation measures;
open-coding and constant comparison used to discover ex-
ltration concepts and rene our collection of categories.
The addition of new categories to the `Data Capture' sub-
category (see Fig. 6(a)) shows our improved understanding
of the dierent data capture modalities that can be exer-
cised in a data breach incident. New exltration concepts
uncovered in our analysis led to a reorganisation of channels
into overt, overt encrypted, covert, and covert encrypted
sub-categories (Fig. 6(b)). In addition, by probing further
into the identied exltration channels, our understanding
about the inherent characteristics of exltration channels
such as bandwidth and covertness was reinforced. By com-
paring the exltration channel concepts across the incidents
already analysed, we also started to develop insight into the
recurrence of such channels. Finally, memos were written to
elaborate on possible other preventive/remedial techniques.
Fig. 7 presents an excerpt from a memo summarising some
of the countermeasures identied through this process.
872Figure 6: (a) Sample of rened data capture categories during iterations (b) Sample of data exltration
channel categories during iterations
5.3 IdentiÔ¨Åed Unknown Knowns
The analysis of data exltration incidents and re-selection
of new attack incidents was continued till no new incident
considered exhibited major variances to properties identi-
ed in previous iterations. This saturation was clear during
the analysis of the 9th incident, with the 10th and 11th in-
cidents producing categories that were minor variances on
existing categories. The body of memos reied the tacit
knowledge embedded within every incident about the causes
of the incident, classes of exploits used during the attack,
conditions within the organisation that made the use of
those exploits favourable, the types of data channel used,
and other possible data exltration methods. Crucially, the
summative memos also contained, in the form of specic
measures to detect and mitigate data exltration attacks,
a crude representation of our identied security unknown
knowns. To develop a theory encapsulating the data exl-
tration security requirements, the memos were sorted and re-
organised in terms of data exltration method types, and for
each method, in terms of measures for detection and mitiga-
tion, and associations to organisational conditions, practices
and relative unpreparedness, that increased susceptibility to
breaches. In doing so, we formulated our theory to rst
include a taxonomy of data exltration methods grounded
in the security concepts empirically collected from the data
breach incidents. The countermeasures were then associated
with these classes and subclasses of data exltration meth-
ods. This enabled particular groups of security requirements
to be readily selected when relevant traits were identied in
a data exltration incident under analysis.
In order to facilitate the operationalisation of the secu-
rity requirements, the security model (based on our the-
ory) was formulated to include controls in a fashion simi-
lar to CSC20. These controls represent a prioritised and
empirically-grounded set of security actions that organisa-
tions can take to assess and improve their current security
state i.e. their resilience to data exltration. Our model re-
nement produced 12 Data Exltration Detection and Mit-
igation Controls (listed in Fig. 8) and 51 sub-controls (re-
nement of the security model represented by the 12 con-
Figure 8: Exltration detection and mitigation con-
trols
trols). A small subset of the security requirements associ-
ated with trac restriction, known channel inspection and
channel trac ltering concepts is reproduced in Fig. 9. A
further renement described importance of the control in
blocking or identifying presence of attacks and classied se-
curity requirements on the same lines as used in CSC20: i)
Quick-wins , ii) Visibility and attribution measures (to im-
prove the security capabilities within an organisation), iii)
Security conguration and hygiene (i.e., best practice guide-
lines) and iv) Advanced sub-controls (i.e., detailed guide-
lines representing latest breakthroughs in countermeasures).
Such an alignment enabled comparison of our derived secu-
rity model with CSC20 in order to identify unknown known
security requirements.
To evaluate the pertinence of our security model, the secu-
rity requirements were compared and contrasted with CSC20.
Each requirement was assessed as to whether it was fully or
partially covered by CSC20 or if it were a new requirement.
As shown in Fig. 9, trac restriction through perimeter re-
walls, proxy servers, and protocol whitelisting is fully cov-
ered by the following controls within CSC20: CSC 13-6,
CSC 11-1. Requirements 3.3.2, 3.3.5, 3.3.6 and 3.3.7 are, on
the other hand, partially or not supported at all by CSC20.
Fig. 10 shows the various CSC20 for which revisions were
identied through our analysis. i.e., they provided only par-
tial coverage of the security requirements identied through
873Figure 9: Trac restriction, channel inspection and
trac ltering requirements
our analysis. The gures in paranthesis indicate the number
of revisions identied. The revisions are summarised below:
Deployment of automated tools to monitor network perime-
ters (CSC 17-5) : CSC 17-5 is overly simplistic as it
does not dene the notion of typical exltration chan-
nels. Nor does it describe the provision of content anal-
ysers for specic channels. In contrast, a Known Chan-
nel Inspection sub-control (from our security model;
Req. 3.3.2 in Fig. 9) identies the need for proxy
servers in high-risk overt exltration channels to in-
spect the content of messages for sensitive information.
DNS query logging mechanisms (CSC 5-11) : CSC 5-
11, in its current form, focuses only on logging and
log review as a detection mechanism. Our partially-
matched Actuated Detection System sub-control (Req.
3.3.7, Fig. 9), in contrast, proposes more advanced
measures, e.g., detecting anomalous DNS queries (out-
side an access control list) through rules specied in the
perimeter Intrusion Detection System (IDS) and auto-
matic quarantining of the query sender to a VLAN.
Use of data loss prevention (DLP) systems (CSC 17-
9): CSC 17-9 currently recommends using network-
based DLP tools to monitor trac patterns without
any precision about the type of patterns to detect C2
activity. Our revision proposes new requirements such
as detecting disparities between the volume of inbound
and outbound packets. We also suggest measures to
reduce false positives (legitimate trac also falls into
the data-in-out-disparity category), e.g., analysing his-
torical network ows to create a baseline.
Cloud provider security practices for data protection
(CSC 17-4) : CSC 17-4 is vague and simply states that
cloud provider security practices should be considered.
Our revision to CSC 17-4 identies requirements to
review provisions for the isolation of virtual machines
and mechanisms to restrict interactions between co-
hosted virtual machines.
Fig. 10 also shows that nine new requirements were identi-
ed: 8 for CSC 17 (which focuses on data protection) and 1
for CSC 3 (which pertains to secure congurations for hard-
ware and software). Examples include the need for:
countermeasures against use of steganographic tech-
niques and protocol tunnels for covert exltration;
Figure 10: Proposed amendments to the CCS Crit-
ical Security Controls v5.0
monitoring connection patterns between endpoints for
anomalous behaviour (e.g., suspect endpoint access, or
hosts acting as staging servers during attack);
preventing memory-scraping operation of malware by
adopting solutions for rapid erasure of data from mem-
ory or timely encryption of sensitive data (e.g., adding
diversity or randomisation to data address spaces);
data-at-rest protection via automatic encryption in le
systems/databases and through negative databases [13].
6. DISCUSSION
6.1 Towards more effective security models
Security models such as CSC20 embody a theoretical un-
derstanding of the threat landscape and the resultant se-
curity requirements at a particular instant in time. They
provide key domain knowledge about the known known secu-
rity threats and associated requirements, and can reasonably
extrapolate to the known unknowns based on this knowl-
edge. The constantly mutating nature of security threats,
however, poses a problem to the pertinence of such security
models. While unknown unknowns , such as zero days, will
always pose a key security threat, unknown knowns result
in the security models being superseded by the relative mu-
tation pace of existing threats and the sophistication of new
threats. This presents a key challenge as what is unknown
known from the perspective of the requirements engineer
may not be so from the perspective of the attacker. Further-
more, while the attacker only needs to identify one unknown
known, the requirements engineer must seek to understand
all possible unknown knowns or, at least, as many as pos-
sible. While we do not claim completeness of the unknown
knowns identied through our method { such completeness
is impossible given the diversity of security challenges in con-
temporary settings { our analysis shows that we can saturate
the identication of unknown knowns in a particular class of
threats (in our case data exltration) with a manageble num-
ber of incidents (11). Our analysis identied 4 partial and
9 fully unknown known security requirements in a widely
adopted security model. This demonstrates both the eec-
tiveness of our approach and the scale of the challenge in
order to keep security models in step with tacit knowledge
embedded in incidents across space and time. Our approach
provides a means for security models to evolve as this tacit
knowledge does { leading to richer models that aggregate
and internalise cause-eect patterns across incidents.
6.2 Partial vs. fully unknown known
Our experience highlights a further categorisation of un-
known known security requirements. Partially unknown knowns
capture mutations of existing threats, leading to renement
874or revision of existing domain knowledge underpinning se-
curity requirements. The evolution of the covertness of C2
communication channels provides a good example of muta-
tions of existing threats. In response to C2 server domain
names being blacklisted and C2 trac showing as outliers on
trac ow analysis, attackers are adapting their approaches,
e.g., using social networks as a C2 server resolution service or
blending C2 trac with packets destined for cloud services.
Fully unknown knowns, on the other hand, capture new
and emergent threats and represent new domain knowledge
that needs to be integrated into existing security models.
For instance, novel exltration methods are continuously
making the transition from the lab to the wild and the
gestation period of a vulnerability exploit from its incep-
tion to its availability in popular exploit kits is now rela-
tively short. For example, the once-novel DNS tunneling
tools were made available in popular exploit kits such as
Metasploit and Blackhole within months of their discovery.
New exltration schemes such as VoIP Steganography (con-
cealing secret messages/data within VoIP streams without
severely degrading the quality of calls) [23] and use of timing
channels [17] are emerging threats for which existing security
models have no control in place.
Our approach also enables the identication of relevant
points within an existing security model where such updates
need to be applied. Its exible nature enabled us to structure
the security model emerging from our analysis along the
same classication as that utilised in CSC20. This, in turn,
allowed a direct comparison across key concepts and controls
in the two models to identify the various points at which
renements/revisions or additions are needed.
6.3 IFT as a linchpin for knowledge capture
and aggregation
Because of the wealth of data contained within incident
documentation, the conventional grounded theory guidelines
of describing and elaborating concepts in terms of their prop-
erties put the analysis process at risk of drifting too far into
the description of an incident, at the cost of its explanation.
IFTs, as the atomic model , facilitate the causal explana-
tions of incidents by enabling the selection and organisation
of pertinent information, which may otherwise be scattered
in the documentation. Use of IFT requires the analyst to
actively search for the relevant incident event, its causes,
enablers, consequences and preventions. This ensures that
the analysis remains focused on drawing out explanations
for the incident rather than documenting the incident's de-
scription. The emphasis on causal relationships within an
IFT ensures that explanation is not traded o in favour of
documentation. Furthermore, the populated IFTs provide
a source of richly expressed domain knowledge otherwise
scattered across raw data from a variety of incidents. For
instance, the inhibit gates make it possible to pinpoint po-
tential requirements with respect to specic threats. These,
in turn, can be mapped to misuse cases, describing sequence
of actions taken by the attacker with respective remedial ac-
tions. Similarly, the higher levels of an IFT can be mapped
to anti-goals, with lower levels mapping to goal renements
and tasks. The remedial actions thus correspond to solutions
to these anti-goals tasks.
6.4 Data and model quality
As our work is based on a data-driven method (i.e., themodel is rst and foremost extracted from the available
data), the quality of the input data is clearly critical. Of
course, the analyst should not choose a source that is ir-
relevant, clearly mis-directed, or otherwise unsuitable. The
concerns about the quality of a given data source are further
mitigated by using a number of dierent input sources and
the key role of the analyst|who systematically processes
and questions the data by eliciting cause, action, result and
eect and lling in missing information through various it-
erations. Furthermore, peer-coding and feedback can also
be used, whereby more than one analyst independently pro-
cesses the given data, with the results of such independent
work critically reviewed by peers (in the team) and then
integrated and harmonised into an agreed upon model.
6.5 Where do unknown knowns hide?
Our experience shows that unknown known security re-
quirements are implicit in patterns of cause-eect-prevention
relationships across a range of security incidents. Analysis
of a single incident using an IFT can reveal tacit knowl-
edge relevant to that particular breach but not the patterns
that can lead to identication of gaps in a prevalant concep-
tual model. While the majority of unknown knowns hide
in patterns across incidents, we did identify instances (e.g.,
the vagueness of CSC 17-4: cloud provider security prac-
tices) where typical patterns of imprecision can identify a
lack of knowledge or the need to discover further knowledge
to plug the gaps in the model. Identication of such gaps can
guide the analyst in chosing incidents for analysis and/or the
search for particular unknown known security requirements.
7. CONCLUSION AND FUTURE WORK
Our method for discovering unknown known security re-
quirements is aimed at rening theoretical security models
so that they remain pertinent in the face of a continuously
changing threat landscape. IFTs enable the requirements
engineer to perform causal analysis of the security incidents
under consideration. The rigorous and iterative processes of
open-coding and memo writing force the requirements en-
gineer to, rstly, rationalise the creation of categories for
new exploit, threat and countermeasure concepts. Secondly,
by selecting incidents to analyse in an attempt to saturate
the categories recorded in memos, the requirements engineer
ensures that requirements derived from these memos are as
near-complete as possible. Furthermore, memo-writing en-
ables one to aggregate identied concepts, extrapolate on
them (e.g., consider the applicability of countermeasures
to dierent threats) and correlate various patterns of at-
tacks and solutions across the analysed incidents. Thus the
method ensures sophistication of coverage aorded by the
coded countermeasures. Our evaluation in a real-world con-
text demonstrates that the rich picture resulting from the
method indeed leads to identication of security require-
ments that may be partially or fully unknown known. Our
future work will explore this distinction further, aiming to
derive a taxonomy of partially and fully unknown known se-
curity requirements to guide the analyst. The qualitative na-
ture of our method makes it possible to structure our derived
model in a format that should enable comparison with any
pre-existing conceptual model to discover unknown knowns
with respect to that model. Such investigation is another
avenue for future work along with our method's potential to
discover unknown knowns in domains other than security.
8758. REFERENCES
[1] The critical security controls for eective cyber
defense, version 5.1. Council on Cyber Security, 2015.
[2] M. Almorsy, A. Ibrahim, and J. Grundy. Adaptive
security management in saas applications. In S. Nepal
and M. Pathan, editors, Security, Privacy and Trust
in Cloud Systems , pages 73{102. Springer Berlin
Heidelberg, 2014.
[3] G. Elahi, E. S. K. Yu, and N. Zannone. A
vulnerability-centric requirements engineering
framework: analyzing security attacks,
countermeasures, and requirements based on
vulnerabilities. Requir. Eng. , 15(1):41{62, 2010.
[4] V. N. L. Franqueira, Z. Bakalova, T. T. Tun, and
M. Daneva. Towards agile security risk management in
RE and beyond. In First International Workshop on
Empirical Requirements Engineering, EmpiRE 2011,
Trento, Italy, August 30, 2011 , pages 33{36, 2011.
[5] B. G. Glaser and A. L. Strauss. The Discovery of
Grounded Theory . Aldine Publishing Co., New York
NY, 1967.
[6] B. Hollis and N. A. M. Maiden. Extending agile
processes with creativity techniques. IEEE Software ,
30(5):78{84, 2013.
[7] J. Horko, N. A. M. Maiden, and J. Lockerbie.
Creativity and goal modeling for software
requirements engineering. In T. Maver and E. Y. Do,
editors, Proceedings of the 2015 ACM SIGCHI
Conference on Creativity and Cognition, C&C '15,
Glasgow, United Kingdom, June 22-25, 2015 , pages
165{168. ACM, 2015.
[8] C. W. Johnson. A Handbook of Incident and Accident
Reporting . Glasgow University Press, 2003.
[9] N. W. Knox and R. W. Eicher. Mort user's manual for
use with the management oversight and risk tree
analytical logic diagram. System Safety Development
Center, Idaho National Engineering Lab., 1992.
[10] L. Lin, B. Nuseibeh, D. C. Ince, M. Jackson, and J. D.
Moett. Introducing abuse frames for analysing
security requirements. In 11th IEEE International
Conference on Requirements Engineering (RE 2003),
8-12 September 2003, Monterey Bay, CA, USA. , pages
371{372, 2003.
[11] N. A. M. Maiden, C. Ncube, and S. Robertson. Can
requirements be creative? experiences with an
enhanced air space management system. In 29th
International Conference on Software Engineering
(ICSE 2007), Minneapolis, MN, USA, May 20-26,
2007, pages 632{641. IEEE Computer Society, 2007.
[12] M. Paradies, L. Unger, P. Haas, and M. Terranova.
Development of the nrc's human performance
investigation process (hpip). Division of Systems
Research, Oce of Nuclear Regulatory Commission,
NUREG/CR-5455, SI-92-101, Vol 2, 1993.
[13] A. Patel, N. Sharma, and M. Eirinaki. Negative
database for data security. In Proceedings of the 2009
International Conference on Computing, Engineering
and Information , ICC '09, pages 67{70, Washington,
DC, USA, 2009. IEEE Computer Society.
[14] P. Ruddick, K. Hannah, C. P. Schade, G. Bellamy,
J. Brehm, and D. Lomely. Using root cause analysis to
reduce falls in rural health care facilities. In Advancesin Patient Safety: New Directions and Alternative
Approaches, Vol. (2) . 2008.
[15] M. Salehie, L. Pasquale, I. Omoronyia, R. Ali, and
B. Nuseibeh. Requirements-driven adaptive security:
Protecting variable assets at runtime. In 2012 20th
IEEE International Requirements Engineering
Conference (RE), Chicago, IL, USA, September 24-28,
2012, pages 111{120, 2012.
[16] P. Sawyer, V. Gervasi, and B. Nuseibeh. Unknown
knowns: Tacit knowledge in requirements engineering.
InRE 2011, 19th IEEE International Requirements
Engineering Conference, Trento, Italy, August 29 2011
- September 2, 2011 , page 329, 2011.
[17] G. Shah and A. Molina. Keyboards and covert
channels. In Proceedings of the 15th USENIX Security
Symposium, Vancouver, BC, Canada, July 31 -
August 4, 2006 , 2006.
[18] G. Sindre and A. L. Opdahl. Eliciting security
requirements with misuse cases. Requir. Eng. ,
10(1):34{44, 2005.
[19] C. Tsigkanos, L. Pasquale, C. Menghi, C. Ghezzi, and
B. Nuseibeh. Engineering topology aware adaptive
security: Preventing requirements violations at
runtime. In IEEE 22nd International Requirements
Engineering Conference, RE 2014, Karlskrona,
Sweden, August 25-29, 2014 , pages 203{212, 2014.
[20] A. van Lamsweerde. Elaborating security requirements
by construction of intentional anti-models. In 26th
International Conference on Software Engineering
(ICSE 2004), 23-28 May 2004, Edinburgh, United
Kingdom , pages 148{157, 2004.
[21] L. M. Veltman. Incident data analysis using data
mining techniques. Master's thesis, Texas A & M
University, 2008.
[22] Y. Yu, H. Kaiya, H. Washizaki, Y. Xiong, Z. Hu, and
N. Yoshioka. Enforcing a security pattern in
stakeholder goal models. In Proceedings of the 4th
ACM Workshop on Quality of Protection, QoP 2008,
Alexandria, VA, USA, October 27, 2008 , pages 9{14,
2008.
[23] E. Zielinska, W. Mazurczyk, and K. Szczypiorski.
Trends in steganography. Commun. ACM,
57(3):86{95, 2014.
876