Cryptanalysis of the Modified SHA256 
Dan Michael A. Cortez  
Technological Institute of the 
Philippines 
Quezon City Campus 
dan.cortez@yahoo.com  Ariel M. Sison  
Emilio Aguinaldo College 
Manila  
ariel.sison@eac.edu.ph  
 Ruji P. Medina 
Technological Institute of the 
Philippines 
Quezon City Campus 
ruji.medina@tip.edu.ph  
 
ABSTRACT 
Different security algorithms are applied to produce hashes or 
ciphertexts to make the data protected from any attack. To determine 
that these algorithms hold capabilities in security data, cryptanalysis 
must be performed to determine its resistance to any attack. 
Cryptanalysis is the process of exploring to break the code used to 
hash or encrypt data. In this paper, the researchers proved that the 
modified SHA256 is viable to length extension , brute-force and 
dictionary attacks. Randomness tests also showed uniform random 
distribution of the hashes generated by the modified SHA256. 
CCS Concepts  
• Security and privacy ----Cryptography ----Cryptanalysis and 
other attacks 
Keywords 
Cyptanalysis; Hashing; Length Extension Attack; Brute-force; 
Dictionary Attack 
1. INTRODUCTION   
Cryptography may be viewed as an assembly of mathematics and 
security. It is accustomed secured sensitive information and 
ensuring that the knowledge is secured with none breaches [1]. It 
accomplished many information security objectives including 
confidentiality, transparency and authentication [2]. Cryptanalysis, 
on the opposite hand, is the method of researching cryptographic 
systems to appear for vulnerabilities or information leakages. It i s 
generally thought of exploring to interrupt a code that accustomed 
encrypt the info without knowing the code [3]. It is the branch of 
cryptology that studies the way to break down cryptographic 
algorithms.  
Cryptanalysis is commonly employed by any institutions to check 
the strength of security procedures in exploting weaknesses of 
internet sites [4]. Although this might not sound very positive, it's a 
very important stage within the development of secure algorithms: 
the cryptographer must consider where the possible vulnerabilities 
are so as to create a powerful chip [5]. It's done mainly in two arenas: 
It allows cryptographers to use modern methods to show 
cryptosystem vulnerabilities. Secondly, it's for monitoring within 
which it many take forms but still disclosed the secured message digest [6]. This suggests that together cryptography and 
cryptanalysis form the sphere of cryptology [1] [7] [8].  
Secure Hash Algorithm 2 (SHA-2) family consists of 4 variants with 
output sizes of 224, 256, 384 and 512 bits. SHA-2 uses a collection 
of cryptographic hash functions. The differences between the 
variants lie on the designed bit registers. Some are designed using 
32 bit registers while some are designed for 64 bit registers. SHA-
256 is taken into account the foremost efficient hash functions 
within the SHA-2 family [9]. Each message with an arbitrary length 
is constructed employing a block cipher by iterating the compression 
function using Merkle-Damgård (MD) construction method to 
supply its hash Although no collision problem has been found up to 
now for the SHA-2 family, MD is liable to length extension attack. 
This attack profit on the safety of information particularly the 
integrity and confidentiality [10].  
Length extension attack exploits vulnerabilities of the iteration 
method utilized in the development of MD. Its drawbacks are chain 
value that's utilized in the subsequent iteration, therefore, the hash 
value output is up to the last chaining value. At the top of the first 
message, an attacker can add some message blocks and resume hash 
computation [11]. 
 Brute Force attack could be a generic attack which will be 
performed and is time consuming because of an oversized sample 
space of possible keys that need to search. It's an attack that 
attempted possible private keys [12] to crack a password or 
username or find the encrypt message. . The fastest and simplest to 
attack a hash is dictionary attack employing a rainbow table. An 
attacker can easily get original text of seized message digest b y 
making as many precomputed message digest as possible then 
compare it to the seize message [13].  
This study was performed to work out the resistance of the modified 
SHA256 to length extension, brute-force and dictionary attacks. 
2. DESIGN ARCHITECTURE O F THE 
MODIFIED SHA256 
The message padding was modified to become 1024  bits. Trailing Bit 
Complement (TRC) method combined with XOR and shift  
operations were used to complicate the padding process. The last 
digit of the binary value of the input message is determined if it ends 
in 0 or 1 bit .  If it ends in 0 bit, all padding bits will use ones otherwise 
will use zero s. This 1024-bit block is divided into 64-bit word block 
to generate the values of W 0 , W1 ... W 15. The 64-bit word is the 
number of bits being processed at a time. This is why the modified 
SHA256 is faster on a 64-bit CPU. The resulting 64-bit block is split 
into eight 8-bit groups and will serve as input for each one of the eight 
substitution boxes. These substitution boxes undergo XOR operation 
and is used as a parameter to T 1 to replace W i in the original equation. 
Another notable improvement on the SHA256 is reducing its 
compression round to 32. Although each iteration almost takes the Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are not 
made or distributed for profit or commercial advantage and that copies bear 
this notice and the full citation on the first page. Copyrights for components 
of this work owned by others than ACM must be honored. Abstracting with 
credit is permitted. To copy otherwise, or republish, to post on servers or to 
redistribute to lists, requires prior specific permission and/or a fee. Request 
permissions from Permissions@acm.org. 
HPCCT & BDAI 2020, July 3 –6, 2020, Qingdao, China  
© 2020 Association for Computing Machinery.  
ACM ISBN 978-1-4503-7560- 3/20/07…$15.00  
https://doi.org/10.1145/3409501.3409513  
179same amount of operations to perform , The process is shown in 
Figure 1.T 1 is already changed using below equation:   
𝐓𝟏 =  𝐡(𝟐𝟓𝟔 )𝟏 (𝐞)+𝐂𝐡(𝐞, 𝐟, 𝐠 )+ 𝐊𝐢 (𝟐𝟓𝟔 ) +  𝐒𝐢       (𝐄𝐪. 𝟏) 
The characteristics of the modified SHA256 is shown in Table 1 .  
 
3. KNOWN ATTACKS ON SHA256 
There are several attacks that can easily be implemented to break the 
hash of the password. The following attacks are simulated and 
discussed.  
 
 3.1 How Length Extension Attack Works in the 
Authentication Process using SHA256? 
SHA256 hashes are based in Merkle Damgard construction where 
by only knowing the message digest, length of m and value of k, the 
attacker can easily compute a second digest which allows anyone to 
include extra information at the end of the message and produce a 
valid hash without knowing the secret message  [14] . This makes 
SHA256 vulnerable to length extension attack wherein an attacker  
is allowed to add extra information to the original message and still 
generate a valid hash [23]. 
In order to explain how length extension attack works, it is assumed 
that the public message which has fixed content is known to the user 
(hacker). If the public message is changed, it is difficult to 
recalculate the hash since you do not know the secret message. 
Anything can be appended at the end of the public message. Also, 
the website or the URL is known to the user.    
Hash = (secret message | public message | padding | additional data) 
Where:  
Hash = SHA256 
Secret message = “????????????????”  
public message = “You need to login to be authenticated.”  
Padding = number of zeros 
additional data = “put any message to be appended”  
| = means concatenation 
In the above example, the length of the secret message is 16 and 
public message length is 38. Although the secret message length is 
assumed to be 16, this can still be brute-forced. This can begin with 
length 1, 2, 3 and so on until the secret message length is guessed . 
So, since 16 plus 38 is already 54 characters, 10 characters are 
padded to come up with 64 bytes.  Included in the padded 10 
character are 0x80 (constant value appended at the end of the 
message) and the length of the secret message concatenated with the 
public message which is 54 bytes (0x1b0). Remember that SHA256 
uses a block cipher of 512 bits and so 64 bytes is equivalent to 512 
bits.  To simplify this, the message is converted to:  
“You need to login to be 
authenticated.%80%00%00%00%00%00%00%00%01%b0put any 
message to be appended ”.  
The message is now used as one of the parameters in the 
authentication process.  
The next thing is the hmac . Basically, since the user was able to 
exploit the length of the secret message and the public message is 
also known, the user can generate this hash 
5989da65fc2df383793d720352acc3e5888a680fea003a07c2f297c9
4dae46dc. This hash can be used to override the register to calculate 
a new hash of 
4dd73795041a6402451458d50b985d18a3549d4af0854d54cd3d43
406ec99ff9. Thus, hmac  has this value. 
To demonstrate how length extension attack works , message  and 
hmac were used. These parameters are sent by the user (hacker) 
using the URL shown below. Using this URL, the user was able to 
generate a valid signature (hacked). This is because the server 
determines that the hacked signature was a valid request since it 
matches with the hash it generated using SHA256 . Thus, this allows 
the user to by-pass the authentication process through the length 
extension attack. Table 1 . Improvements on the Modified SHA256 
Output Size 
(Hash Code) Input 
Block 
Size Word Size Number of 
Rounds 
256 1024 64 32 
 
 
 
8 bytes  
S1 
64 Bit 
Word W 0 
Input 
Message  
1024 Bits Message Padding  
64 Bit 
Word W 1 
Modified T 1 
Compression Function  
(16 rounds of Data)  
Initial Hash Value 
(256 Bits)  
 
Hash Value  
Figure 1. Process Flow of 1024 Bit Block  
64 Bit 
Word W 15 
Sbox 0 
 Sbox 1 
 Sbox 15 
8 bytes  
 8 bytes  
S0 
 S15 
˚˚˚ 
˚˚˚ 
˚˚˚ 
˚˚˚ 
180http://192.168.1.8:12345/index.php?message=You  need to login to 
be authenticated.%80%00%00%00%00%00%00%00%01%b0put 
any message to be 
appended&hmac=4dd73795041a6402451458d50b985d18a3549d4
af0854d54cd3d43406ec99ff9 
3.2 Brute-force and Dictionary Attacks  
Two (2) of the most common ways of guessing passwords are brute-
force and dictionary attacks. In the brute-force attack, every possible 
combination of characters are tried. In the dictionary attack, it uses 
a file containing words, phrases, and common passwords. Each 
word in the file is hashed and is compared to the password hash in 
the database. If they matched,  that word is the password. So, by 
either using brute-force or comparing hashes to known password, 
plaintext will be recovered.  
Brute-force attack is the only attack that operates on all functions of 
cryptographic hash, it is known to be an exhaustive check for all 
messages. With the support of digest message, it traverses the 
algorithm [15]. In general, a computer program is used to perform a 
brute force attack. The brute force would start with one digit 
password number and, in a worst case, cover all possibilities [16]. 
The cryptobreaker uses only one host which searches for the actual 
password in simple attacks or centralized attacks. If the main space 
is long it takes considerable amount of time and computing power.  
Dictionary attack tends to be the tool most used to break the hashes 
of passwords. It uses very large dictionary files which contain 
millions of potential passwords or dictionary word combinations. 
The hash value of each password in the dictionary file is determined 
and compared to every unknown user password with an input hash 
value. This is a fast method when compared with other attack 
methods, but have a success rate lower than brute-force attack . 
Observing recorded attacks and common passwords, it can b e 
concluded that executing a dictionary attack provides reasonable 
success rates. Thus, most attackers now use this approach to break 
several passwords [17] [18] [19]. 
4. RESULTS AND DISCUSSION 
A. Randomness Tests 
Randomness tests are very important because it will ensure that the 
message digests produced by the modified SHA256  conforms to the 
standards set by NIST Statistical Test Suite for Cryptographic Applications Random and Pseudorandom Number Generators 
(2010). 
In Table 2, the following randomness tests were carried using 
Frequency Test (Monobit), Frequency Test within a Block, and Run 
Test. The average randomness scores showed that it surpassed the 
expected p-value of 0.01 set by NIST. 
B. Resistance to Length Extension Attack 
To confirm length extension attack exists in SHA-2 family, 
particularly on SHA256, the simulation presented in Section 3 was 
tested using Hash Pump and Hash Extender. These are tools that can 
be used to exploit length extension attack and are executed via 
commandline in Linux . Table 4 under original SHA256 column 
shows how these tools generate the hmac  and the message  that 
completely skip valid signature verification of the server during 
authentication.  
However, when Hasp Pump and Hash Extender were tested in the 
modified SHA256, these tools were not able to skip valid signature 
verification in the authentication process using the  hmac sent by the 
hacker . Again, it is assumed that the hacker was able to exploit the 
length of the secret key and the public message to produce a hash 
equavalent to 978253571cf180b6b9c5689af44a85f6a058da f61c8 
4082fde8a7ffb2a30baaf .  This hash will now be used by the hacker 
as a signature from the known message to produce a new hash of 
c47dadee5e0e022871c3e7329a4893b39442feea7886974a7e9d4a6
9feb43d29 using Hash Pump or Hash Extender shown in Table 4  
under modified SHA256 column . However, when the authentication 
process compare this hash (hmac) to the hash generated by the 
server, it was completely different.  The hash produced by the 
modified algorithm on the server is 
ce733248892210c771ff6fc653100dbc9f1fb72dff2e7cfe3a6c8ec143
2e5c.  
Table 3. Results of using https://crackstation.net/ , https://www.cmd5.org/  and Hashcat Tool to crack the Hash. 
Password Hash 
Type Hashed Value Crackstation 
Result Cmd5 
Result Hashcat 
Result 
password  SHA-256 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8  Cracked  Cracked  Cracked  
 Modified 
SHA-256 9d148da0cab533a10cc654aa8e80539c473edb675e59a57aa44c377da131ea07  Unknown  Unknown  Unknown  
123456789  SHA-256 15e2b0d3c33891ebb0f1ef609ec419420c20e320ce94c65fbc8c3312448eb225  Cracked  Cracked  Cracked  
 Modified 
SHA-256 66b6792eb5017642e96f6851a8154f084545d95cc1981ae364dc00aad85e2348  Unknown  Unknown  Unknown  
111111  SHA-256 bcb15f821479b4d5772bd0ca866c00ad5f926e3580720659cc80d39c9d09802a  Cracked  Cracked  Cracked  
 Modified 
SHA-256 d456ca0d6912bf6f7dc354ebdc8224e860579e6b63ba90adecdff39e62f9ae44  Unknown  Unknown  Unknown  
qwerty  SHA-256 65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5  Cracked  Cracked  Cracked  
Modified 
SHA-256 94bdcefa414bdd326f48cee44cda08ae760dc89fdb76238beb145ed795f74588  Unknown  Unknown  Unknown  
dragon  SHA-256 a9c43be948c5cabd56ef2bacffb77cdaa5eec49dd5eb0cc4129cf3eda5f0e74c  Cracked  Cracked  Cracked  
Modified 
SHA-256 b077daabaffe04868f605b3726b18e27e33b04851cc8134580d91f9fa4454987  Unknown  Unknown  Unknown  
 
 Table 2. Randomness Test Results of the Message Digest 
generated by the Modified SHA256. 
Average Randomness Scores  
Frequency Test 
(Monobit Frequency Test 
within a Block Run Test 
0.37415 0.31557  0.24799 
 
181C. Resistance to Online Cracking 
The modified SHA256 was tested to determine its resistance to 
online massive pre-computed lookup table using 
https://crackstation.net/  [20] and https://www.cmd5.org/  [21]. It was 
also tested using Hashcat, a well-known password cracker via 
commandline using Linux. Table 3 shows five (5) of the Top 10 
most commonly used passwords according to WordPressEngine 
[22]. This shows that the modified SHA256 is secure from Brute-
force or Dictionary attacks while  SHA256 was easily cracked.  
5. CONCLUSION AND FUTURE  WORK 
The various input message techniques were mixed in the padding 
scheme and additional operations in the cryptographic hash function 
of SHA256 have secure the hash generated to length extension, 
brute-force, and dictionary attacks . Randomness tests using 
Frequency Test (Monobit), Frequency Test within a Block, and Run 
Test also show that the hash produced is random since the average 
result of each pvalue obtained surpass ed the p-value set by NIST 
which is 0.01. It will take time for the modified algorithm to be 
broken. For future reference, the modified algorithm should be 
tested for other types of attacks which are common to hashing 
algorithms. 6. REFERENCES 
[1]  S. T. Al-Janabi, B. Al-Khateeb and A. J. Abd, "Intelligent 
Techniques in Cryptanalysis: Review and Future 
Directions," UHD Journal of Science and Technology, vol. 
1, no. 1, pp. 1-10, 2017.  
[2]  O'REILLY, "The Role of Cryptography in Information 
Security," O'REILLY, 2020. [Online]. Available: 
https://www.oreilly.com/library/view/cissp-for-
dummies/9781118417102/a2_13_9781118362396-
ch08.html. [Accessed 2020]. 
[3]  T. W. Edgar and D. O. Manz, Research Methods for Cyber 
Security - Chapter 2 Science and Cyber Security, Elsevier, 
2017.  
[4]  Webopedia, "Cryptanalysis," Webopedia, [Online]. 
Available: 
https://www.webopedia.com/TERM/C/cryptanalysis.html. 
[Accessed 2020]. 
[5]  C. DE CANNIÈRE, A. BIRYUKOV and P. BART, "AN 
INTRODUCTION TO BLOCK CIPHER 
CRYPTANALYSIS," PROCEEDINGS OF THE IEEE, vol. 
94, no. 4, pp. 346- 356, February 2006.  Table 4. Generating the hmac  and the message  values using Hash Pump and Hash Extender. 
Original SHA256 Cracking
Tools Modified SHA256 
HashPump# ./hashpump - s 
5989da65fc2df383793d720352acc3e5888a680fea003a07c2f297c94da
e46dc -d 'You need to login to be authenticated.' -a 'put any message 
to be appended' -k 16   
 
 
 
Hash 
Pump  HashPump# ./hashpump - s 
978253571cf180b6b9c5689af44a85f6a058daf61c84082fde8a7ffb2a30
baaf -d 'You need to login to be authenticated.' -a 'put any message to 
be appended' -k 16  
Result  Result  
HMAC  Message  HMAC  Message  
4dd73795041a6402451458d50b
985d18a3549d4af0854d54cd3d4
3406ec99ff9  You need to login to be 
authenticated.\ x80\x00\x00\x00\
x00\x00\x00\x00\x01\xb0put any 
message to be appended  c47dadee5e0e022871c3e7329a
4893b39442feea7886974a7e9d
4a69feb43d29  You need to login to be 
authenticated.\ x80\x00\x00\x00\x
00\x00\x00\x00\x01\xb0put any 
message to be appended  
    
hash_extender# ./hash_extender - s 
'5989da65fc2df383793d720352acc3e5888a680fea003a07c2f297c94d
ae46dc' -d 'You need to login to be authenticated.' -a 'put any 
message to be appended' -l 16   
 
 
 
 
 
 
Hash 
Extender  hash_extender# ./hash_extender - s 
'978253571cf180b6b9c5689af44a85f6a058daf61c84082fde8a7ffb2a3
0baaf  ' -d 'You need to login to be authenticated.' -a 'put any message 
to be appended' -l 16  
Result  Result  
HMAC (New Signature)  Message (New String)  HMAC (New Signature)  Message (New String)  
Type: sha256 
Secret length: 16  
 
New signature: 
4dd73795041a6402451458d50b
985d18a3549d4af0854d54cd3d4
3406ec99ff9 
 New string: 
596f75206e65656420746f206c6f
67696e20746f206265206175746
8656e746963617465642e800000
000000000001b070757420616e7
9206d65737361676520746f2062
6520617070656e646564  
 
Decode the New String to 
produce this:  
You need to login to be 
authenticated.\ x80\x00\x00\x00\
x00\x00\x00\x00\x01\xb0put any 
message to be appended  Type: sha256 
Secret length: 16  
 
New signature: 
c47dadee5e0e022871c3e7329a
4893b39442feea7886974a7e9d
4a69feb43d29  New String: 
596f75206e65656420746f206c6f6
7696e20746f20626520617574686
56e746963617465642e80000000
0000000001b070757420616e792
06d65737361676520746f2062652
0617070656e646564  
 
Decode the New String to produce 
this: 
You need to login to be 
authenticated.\ x80\x00\x00\x00\x
00\x00\x00\x00\x01\xb0put any 
message to be appended  
 
182[6]  A. K. Kendhe and A. Himani, "A Survey Report on Various 
Cryptanalysis Techniques," International Journal of Soft 
Computing and Engineering (IJSCE), vol. 3, no. 2, pp. 287-
293, 2013.  
[7]  W. Stallings, Cryptography and Network Security Principles 
and Practice, Pearson Education, Inc., 2014.  
[8]  M. J. Banks, A Search-Based Tool for the Automated 
Cryptanalysis of Classical Cipher, York: MEng. Thesis, 
Department of Computer Science, University of York, 2008.  
[9]  A. Habeeb, "Introduction to Secure Hash Algorithms," 23 
April 2018. [Online]. Available: 
https://www.researchgate.net/publication/325581582_Introd
uction_to_Secure_Hash_Algorithms. 
[10]  M. Danziger and M. A. A. Henriques, "Improved 
Cryptanalysis Combining Differential and," 2014.  
[11]  S. Siswantyo and B. H. S. Susanti, "Implementation 
Analysis of RC5 Algorithm on Preneel-Govaerts-
Vandewalle (PGV) Hashing Schemes using Length 
Extension Attack," in AIP Conference Proceedings , 2016.  
[12]  C. J. Mok and C. W. Chuah, "An Intelligence Brute Force 
Attack on RSA Cryptosystem," Communications in 
Computational and Applied, vol. 1, no. 1, pp. 1-7, 7 March 
2019.  
[13]  S.-y. Park and K. Kim, "An Approach to Defense 
Dictionary Attack with Message Digest Using Image Salt," 
Proceedings of the 13th International Conference on 
Ubiquitous Information Management and Communication 
(IMCOM), pp. 769-777, 2019.  
[14]  H. Tiwari, "Merkle-Damgård Construction Method and 
Alternatives: A Review," Journal of Information and 
Organizational Sciences, vol. 41, pp. 283-204, December 
2017.   
[15]  S. Sharma and V. Chopra, "Data Encryption using 
Advanced Encryption Standard with Key Generation by Elliptic Curve Diffie-Hellman," nternational Journal of 
Security and Its Applications, vol. 3, no. 11, pp. 17-28, 
2017.  
[16]  M. R. H. Ahangar, M. R. E. Taba and Arash.Ghafouri, "On 
a Novel Grid Computing-Based Distributed Brute-force 
Attack Scheme (GCDBF) By Exploiting Botnets," 
International Journal of Computer Network and 
Information Security(IJCNIS), vol. 9, no. 6, pp. 21-29, 2017.  
[17]  J. Jose, T. T. Tomy, V. Karunakaran, A. V. A. Krishna V 
and N. C.A., "Securing Passwords from Dictionary Attack 
with Character-Tree," in IEEE WiSPNET , 2016.  
[18]  V. D. and M. C.E.V, "Efficient dictionary for salted 
password analysis," in Electronics, Computing and 
Communication Technologies (IEEE CONECCT) 
International Conference , 2014.  
[19]  go4the101, "Dictionary vs. Bruteforce Attacks - Explained," 
Youtube.com, 7 February 2008. [Online]. Available: 
https://www.youtube.com/watch?v=2hveQ8QZ9MQ. 
[20]  CrackStation, "Free Password Hash Cracker," CrackStation, 
[Online]. Available: https://crackstation.net/. [Accessed 27 
May 2019].  
[21]  CMD5, "CMD5 - MD5 Online, MD5 Decription and MD5 
Hash Decoder," CMD5, 2006. [Online]. Available: 
https://www.cmd5.org/.  
[22]  WP Engine, "Unmasked: An Analysis of 10 Million 
Passwords," WordPress, [Online]. Available: 
https://wpengine.com/unmasked/. [Acce ssed 2020]. 
[23]  R Bowes, “Everything you need to know about hash length 
extension attacks” skullsecurity.org [Online]. Available: 
https://blog.skullsecurity.org/2012/everything-you-need-to -
know -about-hash-length-extension-attacks [Accessed 25 
September 2012]. 
 
183