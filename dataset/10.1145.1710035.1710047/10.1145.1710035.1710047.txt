Enabling Web Object Orient ation with Mobile devices 
Cedric Ulmer 
SAP Research  
Sophia Antipolis, France 
cedric.ulmer@sap.com Gabriel Serme 
SAP Research  
Sophia Antipolis, France 
gabriel.serme@sap.com Yohann Bonillo 
SAP Research  
Sophia Antipolis, France 
yohann.bonillo@sap.com 
 
 
ABSTRACT 
We consider in this paper that mobile devices s hould be seen as 
active objects communicating th rough web technologies, in a 
sense that they can both receive and send information. Therefore, 
following our introduction motivating our work, we propose a 
lightweight architecture that enables object orientation through 
web technologies. This architecture is called Web Object 
Orientation, and focuses on widely accepted approaches such as 
REST and WSDL. We show how this architecture is suited for 
mobile devices platforms th at support both HTTP and 
serialization like JSON or XML. 
Categories and Subject Descriptors  
D.2.12 [ Software Engineering ]: Interoperability  – Distributed 
objects 
General Terms  
Performance, Design, Experimentation. 
Keywords  
Web object orientation, mobility , REST, lightweight, WSDL 2.0. 
1. INTRODUCTION 
An increasing number of mobile devices are being connected to 
the internet, thanks to new hardware, standardized protocols, 
innovative applications and attr active subscription models for 
customers. In our communication driven world, users 
progressively consider their mobile devices as a means to share 
and expose information, the same way they consider their 
personal computers. This follows  the web 2.0 wave, where users 
act as collaborators using simp le web technologies. Although 
Web-Services and their corre sponding W3C standards are now 
recognized as de facto standards,  one can notice the emergence of 
a “simpler” resource-oriented approach, encompassing feeds for 
blogging, and REST. We consider that the web services and 
resources approaches both make sense, depending on the usage 
context. Yet although the usage of REST is getting mature in the 
personal computer world, it is still in its infancy in a mobile 
usage. We will present in the following sections of our paper a paradigm that combines the two above-mentioned approaches. 
In parallel to this, the evolution of programming languages 
through history shows that object orientation became a major 
interest of the software industry as it simplified design, 
assembling and maintenance of applications. Hence, in local programming or in distributed programming, languages turned 
into a world of objects. We investigate into the enablement of object orientation using the abov e-mentioned technologies: REST 
and Web services, to bring object orientation in a “web-operable” 
way. We call this architecture Web Object Orientation. 
2. WEB OBJECT ORIENTATION 
The Web Object Orientation is not a new idea. It is inspired from distributed systems like CORBA [2], DCOM [3] or java RMI [4]. 
What we propose is the use of recognized techniques and 
standards. We focus on simplicit y, and on fast-time to develop 
new application. Our lightweight architecture uses REST as main 
principle. We first introduce the REST paradigm. 
2.1 REST 
The term REST was coined by Roy Fielding in his PhD 
dissertation [1] : “REST provides a set of architectural constraints 
that, when applied as a whole, emphasizes scalability of component interactions , generality of interfaces, independent 
deployment of components, a nd intermediary components to 
reduce interaction latency, enforce security, and encapsulate 
legacy systems”. R. Fielding desc ribes the software engineering 
principles guiding REST and the in teraction constraints chosen to 
retain those principles, contrasting them to the constraints of other 
architectural styles.  In REST, everything is a resource.  A resource can be thought of as a distant object one can interact 
with, but not manipulate directly.  This is similar in spirit to object-oriented programming wher e everything is an object, but 
the approach is fundamentally different. Every resource, identified by a unique name, is interact ed with using a universally 
predefined set of verbs. These verbs are defined for every resource globally.  On the web, the verbs are the standard HTTP 
methods as POST, GET, PUT, and DELETE. Each method has 
clear defined semantics that can be relied upon. 
2.2 WebOO 
When looking at the history of  programming languages, one can 
notice that once local structured programming got largely addressed, two branches emer ged. On one hand, Object 
orientation has been introduced. It was a new way of modeling the world, and making software de velopment more natural. On 
another hand, the distributed  programming approach has 
appeared. This aspect allows to leverage interconnected 
computers and to move a step to wards flexibility of resources 
location. Architectures are no longe r centralized, but opened for 
communication between many en tities. Early distributed 
technologies were designed as  a structured distributed 
programming, like the Remote Procedure Call (RPC) paradigm. 
The industry then enabled the sa me capabilities for distributed 
object applications with CORBA, DCOM or RMI. Yet none of these standards reached a critical mass of adoption by both the Permission to make digital or hard copi es of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that 
copies bear this notice and the full citation on the first page. To copy 
otherwise, or republish, to post on servers or to redistribute to lists, 
requires prior specific permission and/or a fee. 
Mobility 2009, Sep 2-4, Nice, France Copyright © 2009  
ACM 978-1-60558-536-9/00/0009……$5.00developers and the business users communities. One point of 
failure in these technologies was the link between the solution 
used and the vendor, as CORBA w ith its multiple Object Request 
Brokers (ORBs) [5]. This brought  a complex approach to write 
and deploy applications. The spread of internet and the need of 
users to make their applications interconnected moved the focus 
towards interoperability between software solutions. Hence, after local programming and distributed programming came work on 
“web-operable programming”. Th e main communication-channel 
in this paradigm is the Internet. Interfaces based on this “web-operable programming” are called Web services [6]. They are 
built on standards, as SOAP and Web Services Description Language [7] (WSDL) which bring a standardized way to 
interconnect applications together. This set of standards has been 
accepted by the developers’ community and by the main actors of the industry. Yet by nature, pr ogramming using web-services is 
distributed programming with a focus on function calls (considering that services are equi valent to functions). There is no 
notion of object orientation. Fu rthermore, these web-services 
require a complex library stack to handle the communication. In 
2000, REST has been proposed as a different approach to communications. REST propagates the idea that plain HyperText 
Transfer Protocol (HTTP) is al ready enough to have meaningful 
interactions between systems. From these considerations, we searched a way to enable Object Orientation in a “web-operable” 
world, while taking into consid eration adopted standards and 
technologies. We propose a combination of Web services and REST to enable Object Orientation. We call it Web Object 
Orientation (WebOO). 
2.2.1 Architecture 
The WebOO architecture has been designed to enable the 
development of distributed applications with a focus on 
interoperability, light footprint and resource orientation. In this 
architecture, we distinguish two phases. The design phase  is 
about designing objects and describing their methods and attributes. The design phase allows creating a high-level 
description of an appl ication, with interaction between objects. 
The runtime phase  involves running instance of objects, and we 
need to know how to call methods  and get attributes on these 
instances. We propose a way to describe a web-object at the 
design and runtime phases. Since one of our focus in 
interoperability, we aim for the usage of widespread and simple 
web technologies. Existing desc ription languages for such web-
based interaction on resources are WADL [9] and WSDL. Yet 
both of them were insufficient to describe an object because they 
have been designed to de scribe services. The W3C 
recommendation WSDL 2.0 is the de  facto standard for describing 
web services. We have identified that applying few modifications 
to the WSDL 2.0 recommendation allows to reverse the perspective, and thus to descri be not services exposing objects, 
but rather objects exposing services. This enhanced language is our Web Object Descrip tion Language (WODL). 
The focus of this paper is not WODL, but we can briefly explain 
that it allows describing an object  with its attributes and methods. 
By combining it to REST, it also provides information on how to 
access the object through HTTP. W ith a WODL description, it is 
possible to compose an application at the design-time as the object structure is known. 
 
Figure 1 : WebOO Architecture Overview 
At the runtime-phase, we can di stinguish two elements. A web 
object contains both exposed attr ibutes and executable methods. 
We argue methods are similar to services we can process 
remotely, but applied to a specific instance. Attributes are closer 
to resources, which we can access and modify. In light of those 
observations, we map our architecture to allow methods call through Web-services call and attributes access through REST. 
The WebOO Architecture (see Figure 1) is composed of a 
WebOO manager that handles requests from clients and 
dispatches them to the relevant Web Object instances. Clients use 
Internet as the communication ch annel. They can send requests 
for accessing or modifying a Web Object. To simplify programming on client side, we show in the Figure 1 some 
WebOO Helper. They are just classes to make HTTP calls. 
Requests use plain HTTP, and as an object can be viewed as a 
resource, we use the REST principle to expose the objects through 
HTTP. Hence, we identify the representation of a Web Object 
through a URL combining the host address, a namespace, and the 
name of the object. At the runtime phase, the URL 
“
http://hostname:port/namespace/webObjectName ” 
allows interaction with the class webObjectName.  The Web 
Object instance is based on the same combination, i.e host name, 
namespace and a Web Object name with a unique identifier 
named UUID. It allows the We b Object manager to get the 
matching instance from the UUID involved in the request. This naming convention ensures the uni queness of an instance among 
Internet, and simplifies the communication payload: the instance identifier is passed through the URL instead of putting it in the 
payload as a parameter.  During the communication, the client and 
the server need an interchange data format. We identified the following mechanisms as being widely used for messages 
exchange: the SOAP protocol (widely spread with Web Services), 
XML and JSON [9]. 
Our proposition is to make a dis tinction between methods call and 
attributes manipulations. As we sa id, we see method calls close to 
a web service. SOAP messaging is a recognized means to services 
operations. Thus, we propose to call a Web Object method as a 
service with the SOAP protocol. Attributes manipulation are done 
thanks to REST. In this case, the interchange data format is open. 
For instance, it can be plain-old XML (POX), as WODL and 
WSDL already enable this possibility. In fact, the serialization 
protocol is defined in the WODL  file, which indicates what the 
server accepts. Thus nothing prev ents a user from going for a pureJSON approach for even more li ghtweight processing, but with 
the drawback of the need to map the WODL input and output 
descriptions to the JSON format. 
To summarize, WebOO is a combin ation of existing technologies. 
First WSDL2.0, which allows for benefiting from a large 
community of experienced de velopers. Second, RESTful 
communications to enhance the performance and reduce the 
messages complexity. Last, res ources identification through 
URLs, providing a distri buted objects approach. 
3. WEBOO AND MOBILITY 
In this section, we demonstrat e how WebOO can be deployed in 
mobile devices, keeping in mind identified constraints related to 
mobility. Those are limited bandwidth and variable connectivity 
on one hand, and restricted processing power on the other hand.  
3.1 WebOO for mobile devices 
Within the WebOO architecture, mobile devices can considered as two different components. C onsidering the components of 
Figure 1, mobile devi ces can be either Clients , hence 
manipulating remote web obj ects; or they can be Servers , hence 
hosting and exposing web objects.  
Server component requirements  
As a device manager needs to expose Web Objects through 
HTTP, our requirement is a web server embedded in the mobile 
device. We have identified se veral mobile platforms proposing 
such web server: Symbian [10], Android [11], iPhone [12], but also for windows mobile [13] and Palm [14]. These mobile 
devices need to parse requests and interpret messages. As we rely 
on the REST philosophy, parsing the request is about parsing the 
URI, because the URI gives information on resource to access to. 
Platforms should also include possi bility to handle XML or JSON 
for messages. Table 1 gives an overview of platforms and the 
support of JSON and XML. Although more lightweight than a 
SOAP approach, acting as a server remains costly for mobile 
devices. Hence the need to use this mode only in identified situations, for instance when mobile devices need to act as sensors 
exposing values and methods.  
Client component requirements  
Our requirement for enabling WebOO as client is to have access 
to the HTTP application layer with support of either XML or 
JSON for communication serializati on. Table 1 lists technologies 
available on widespread mobile pl atforms. It shows that HTTP 
and serializations are handled by all of them. Each platform embeds enough technology to cr eate a native application which 
uses our WebOO archit ecture. Without any th ird libraries, we can 
create clients who make HTTP ca lls, and so interact with Web-
objects. The benefit compared to  web-services is we do not 
require any third-party library to handle the communication and to 
interpret messages. 
Table 1. WebOO requirements for mobile platform  
Platform Language HTTP class 
JSON/XML
iPhone Objective-C CFNetwork S/N 
Android Java HttpClient N/N 
Blackberry Java HttpConnection S/N 
Windows  
mobile .NET  
languages HttpWebRequest S/N Symbian C++ RHttpRequest S/N 
Others with  
Java-ME  
MIDP Java HttpConnection S/N 
Palm webOS HTML5/ 
Javascript Ajax object N/N 
 
N = native; S = supported with additional library 
Table 2 lists Ajax support for id entified mobile browsers [15]. 
With those, we have enough to cr eate an application which can 
access Web-Objects, and modify them. In addition, assuming that 
the native programming language of the mobile device also 
handles HTTP, it can as well manipulate Web-Objects. Thus at 
each programming level of such mobile device, one can benefit 
from distributed object programming. 
Table 2. List of Ajax compatible browsers  
Browser Platform 
Java Opera Mobile  
(>= 8.x, not Opera Mini) Windows mobile, 
Symbian 
IE Mobile (WM 5.0/2003) Windows mobile 
S60 3rd ed.  
(WebKit/KHTML core) Symbian 
Fennec (Mozilla based)  Windows mobile, 
Symbian 
Safari Mobile (iPhone) iPhone 
 
3.2 Mobile devices limitations 
Many types of wireless networks exist for mobile devices. We are 
interested in networks that supp ort the HTTP application layer. 
Mobile devices embed networks protocol starting from Personal 
Area Network (PAN) and Local Area Netwok (LAN) for close 
environment to Wide Area Network (WAN) [16]. In Personal or 
Local Area Network, known transpor t protocols are Bluetooth and 
Wi-fi, which have not the same goal [16]. Bluetooth is mainly 
about interconnections between devi ces, while Wi-fi is used as a 
link to the Internet. With our WebOO approach, we need an HTTP layer which is difficult to implement over Bluetooth.  
Mobile devices offer connect ions to WAN thanks to 
telecommunication standards for mobile networks. The third 
generation – UMTS - allows a hi gh-speed connection to internet. 
It brings a sufficient layer to enable HTTP.  
Benefits of a WebOO approach 
In the case of WebOO on a mobile  device, the connectivity used 
depends on which component the mob ile implement. Either it is a 
client component or a server component. The scope may not be 
the same. If the mobile device is  a client component, it is most 
likely it will connect through WAN c onnections to interact with 
remote Web Objects. It can also connect to servers-component in 
a local area. A server component will have different behavior. As devices may embed web server, uplink capabilities remains low 
and does not allow large scalabi lity. Unless a server component 
has to serves few WAN-clients, it should be in a scope of LAN to 
serves other devices. 
A benefit of our WebOO approach is serialization we use. We 
reduced size of messages by no t embedding description during 
communication phase. Also we tran smit only information relevantfor the action being processed. If a client needs to call a method, 
only method’s result will be sent. The communication is separated 
to serve what the client request and nothing more.  
4. ICM USE CASE 
To illustrate the use of our architecture, we provide a scenario related to Investigative criminal Case management (ICM) for 
police forces.  
 
Figure 2. ICM Use case 
A murder happened in an old hotel, a special agent is in charge of 
the case. He investigates in the room to find evidences. He is 
equipped with a mobile devi ce embedding a camera, a GPS 
tracker and a secure connection to the server of the central agency. The goal for the investigator is to collect all the relevant 
information with picture, descri ption and positioning, in order to 
let the operator at the central agency analyze information and sort out useful evidences.  
For this scenario, the investigator has the WebOO server 
component on the mobile device and exposes evidences he is 
collecting. The operator has the WebOO client component on the 
central agency, and access objects from the investigator’s mobile. 
An evidence class is composed by a picture, a description, the 
GPS position, and a date. 
 
Figure 3 : Use case sequence diagram 
As the sequence diagram illustrates in Figure 3, the investigator 
captures a picture with its device, and attaches it to newly created 
evidence. It is automatically exposed as a Web Object with the 
URL “http://agent1.mob.sap.com/icm/evidences/69 ” 
Thus, the operator retrieves the evidence through an HTTP GET. 
To access the picture, he has to access the attribute “picture”. The 
interest of WebOO here is the application on the phone, as 
application on central server is  programmed as object-oriented 
programming. The operator can handl e evidences as he would be 
in local environment, and so the investigator to create evidences. 
5. CONCLUSION 
The Web Object Orientation approach we present in this paper introduces recognized standards and paradigms (resp. WSDL and 
REST) enabling object oriented distributed. We introduced WODL, which allows for the reuse of web services tools with 
slight modification for supporti ng WebOO. We showed that WebOO is suited for mobile devi ces platforms that support both 
HTTP and a serialization such as JSON or XML; we illustrated 
the concept through a public security related scenario. In terms of 
further work, we are investigating the domains of scalability and 
security. Scalability because although Roy Fielding anticipates in 
his thesis that REST leverages the scalability mechanisms of the 
web, this remains to be proven. Security because exposing objects 
rather than services modifies the security problematic, for instance 
in terms of cascading access rights for cross-referencing web 
objects. 
6. REFERENCES 
[1] R. T. Fielding. "Architectur al Styles and the Design of 
Network-based Software Architectures". PhD Thesis, 2000. 
Chair-R. N. Taylor. 
[2] "Common Object Request Broker Architecture (CORBA) 
Specification, Version 3.1". OMG, 
http://www.omg.org/spec/CORBA/3.1/, January 2008.  
[3] M. Horstmann and M. Kirtland. "DCOM Architecture". Microsoft, http://msdn.microsoft.com/en-
us/library/ms809311.aspx, July 1997. 
[4] "Java remote method invocation home". Sun Microsystems, 
http://java.sun.com/javase/technologies/core/basic/rmi/index.
jsp 
[5] M. Henning. "The Rise and Fa ll of CORBA". ACM Queue, 
4(5):28-34, June 2006. 
[6] D. Booth, H. Haas, F. McCabe , E. Newcomer, M. Champion, 
C. Ferris and D. Orchard. "Web Services Architecture". 
W3C, http://www.w3.org/TR/ws-arch, 11 February 2004. 
[7] R. Chinnici, J.-J. Moreau, A. Ryman and S. Weerawarana. “Web Services Description Lan guage (WSDL) Version 2.0”. 
W3C Recommendation, http://www.w3.org/TR/wsdl20/, 26 June 2007. 
[8] Marc J. Hadley. "Web Applic ation Description Language". 
Sun Microsystems Inc, https://wadl.dev.java.net/, November 2006 
[9] JSON, http://json.org, July 2006 
[10] Johan Wikman, Ferenc Dosa. "M obile Web Server". Nokia, 
http://opensource.nokia.com/projects/mobile-web-server/, May 2008 
[11] Jan Bartel, Gregory J. Wilkins. "i-jetty", http://code.google.com/ p/i-jetty/, April 2009 
[12] "Cocoa http server for Iphone", 
http://code.google. com/p/cocoahttpserver/, April 2009 
[13] Nicholas Nicoloudis and Denni s Pratistha, ".NET Compact 
Framework Mobile Web Server Architecture", http://msdn.microsoft.com/en-u s/library/aa446537.aspx, July 
2003 
[14] Reuter, F. and Luttenberger, N., "A Small HTTP Server for Web Service Based Communicati on of Ubiquitous Devices", 
Institute of Computer Science and Applied Mathematics Kiel 
[15] Georgi, R., "AJAX on mobile de vices - making mobile web 
apps ubiquitous". XTech 2007 
[16] Gerasimenko, S., "The e volution of wireless home 
networking”